apply plugin: 'com.android.application'
import com.android.build.gradle.api.ApplicationVariant
import groovy.xml.XmlUtil
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.xmly.test5"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
def addChannel(File manifest){
    def channelNo = project.property("channel")
    def xml = new XmlParser().parse(manifest)
    xml.application[0].appendNode("meta-data",['android:name':'channel','android:value':channelNo])

    manifest.withPrintWriter("UTF-8"){
        XmlUtil.serialize(xml,it)
    }

}
project.afterEvaluate {
    android.applicationVariants.each { ApplicationVariant variant ->
        String variantName = variant.name.capitalize()

        def mergeManifestTask = project.tasks.getByName("process${variantName}Manifest")
        mergeManifestTask.doLast{ mm ->
            String manifestPath = "$mm.manifestOutputDirectory/AndroidManifest.xml"
            def manifest = file(manifestPath).getText()
            if (project.hasProperty("channel")){
                def channelNo = project.property("channel")
                def xml = new XmlParser().parseText(manifest)
                xml.application[0].appendNode("meta-data",['android:name':'channel','android:value':channelNo])
                def serialize = XmlUtil.serialize(xml)
                file(manifestPath).write(serialize)
            }
        }
    }

}






task one{

}

task goTestLifeCycle{
    dependsOn('one')
    println 'the lifecycle of gradle:我会在Configuration阶段执行'
    doFirst{
        println "doFirst:我会在Execution阶段执行"
    }
    doLast{
        println "doLast:我会在Execution阶段执行"
    }
}
task TestHook{
    afterEvaluate {
        println 'hook afterEvaluate'
    }
}
task TestInsertHook{
    afterEvaluate {
        tasks.findByName("assembleDebug").doFirst {
            println 'jackie is on afterEvaluzte'
        }
    }
}
// task TestErrorHook {
//   tasks.findByName("assembleDebug").doFirst {
//     println 'hook afterEvaluate from TestErrorHook'
//   }
// }




